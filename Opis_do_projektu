styles.scss - tu możemy globalnie zaimportować style - np .bootstrap

npm install bootstrap instalujemy bootstrapa

main-style.scss to plik z globalnymi stylami 

style.scss - musimy tu zaimportować istniejące pliki z stylami globalnymi jak main-style.scss


każdy komponent musimy w głównym pliku routingu importować ( import itd.) oraz dodać " ścieżke routingu " 

w pliku scss w komponencie żeby użyć zmiennych z kolorami globalnymi zdefiniowanymi w main-styles trzeba go (main-styles) zaimportować 

glowna-sekcja-kalkulacji 

poniżej użyta funkcja wbudowana w scss lighten 
&.green {
            color: lighten($color: ,$amount: ) $green;
						
			
cursor: pointer;  właściwość dzieki której na wybranym obszarze pojawi się "łapka"

///////////////////////

input poniższy to jakby funkcja do której przypisujemy zmienną "jestPrzychodem" o typie bool czyli prawda lub fałsz

@Input() jestPrzychodem: boolean;  zdefiniujemy wartość defaultową false/true 

////////////////////////
klasa element-listy jest w komponncie lista-elementow-karta - "pasek" w którym wpisujemy wartość i opis  
klasa lista-elementow dotyczy komponentu lista-elementow w którym sa kolumny wydatek/przychod 

/////////////
w lista-elementow-karta klasa x-button right: 0; przesunie button na maksymalnie prawą strone

lista-elementow-karta.component.scss zawiera efekty specjalne które nie sa jakoś przesadnie potrzebne  


///////////////

importujemy angular forms do app.module.ts w dwóch miejscach.

w dodaj-element.component.html #DodanieElementu to zmianna odnosząca się do formularza ( chodzi o dodanie elementu - submit zatwierdzenie dodania )


dalej musimy połączyć inputy z modelem czyli dodaj-element.component.html z Element-Dodany.model.ts

problem - 1:19:44  na dodaj-element.component.ts niezdefiniowany element input 

error TS2304: Cannot find name 'Input'  - znalazłem odpowiedz na stack overflow żeby to doimportowac 


dodaj-element  w inpucie dodajemy required - to oznacza że element jest wymagany 

///////////////
 [disabled]="!FormDodanieElementu.valid"
jak to dopiszemy to będzie niemożliwe kliknięcie buttona"dodaj" bez uprzednio wprowadzonych wartości.


dodaj-element.component  
zmienne i selektory 


metoda do kliknięcia buttona 

w html przy buttonie (click)="metoda()"    metoda() musi byz zdefiniowana w pliku ts 

definiujemy metode metoda() w pliku ts ( w danym komponencie którego dotyczy.
metoda() {

}
potrzebny jest do tego eventemitter w takiej postacji 

@Output() XKlik: EventEmitter<any> = new EventEmitter<any>();  


@Input, @Output - dekoratory ( w relacji poniędzy modułami między którymi istnieje zależność typu rodzic dziecko) 

przesyłanie danych od rodzica do dziecka: u rodzica deklarujemy właściwość np zmienna ( public name = "cośtam" pliku ts  ) inastępnie bindujemy to z selektorem dziecka ( przykładowo [parentData]="name" ) dziecko (html) - 
nazwa parentData jest umowna (to jest child selector) tu może byc równiez metoda ale musi byc zdefiniowana u rodzica ??

u dziecka deklarujemy @Input('parentData') public name;  możemy teraz używać name w "dziecku"(html)  przykładowo   <p>{{name}}</p>


Jeżeli chcemy przesłac dane od dziecka do rodzica to : tu musimy użyc eventu. tworzymy instancje eventemittera (nazwa np childEvent) u dziecka w pliku ts
@Output public childEvent = new eventEmitter(); 

w komponencie rodzicu - w divie komponentu dziecka !!!  (childEvent)="message=$event"  event prześle dane do rodzica 

 modal - którym modyfikujemy element dodany na liście - modal to takie wyskakujące okienko 

interface - wartość bilansu przedi po update - jeżeli usuniemy lub dodamy element to bilans musi sie aktualizowac 


ngSubmit 


bootstrap 

jasny kolor wyświetlacza  
cyferki damy ciemnozielone i ciemnoczerwone 


edytuj-element        

trzeba doinstalować angular material - z angulara  bootstrap

problem z angular material